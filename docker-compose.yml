services:
  fix-perms:
    image: busybox:1.36
    command: sh -lc "
      mkdir -p /data/uploads &&
      chown -R 10001:10001 /data &&
      chmod -R g+rwX /data
      "
    volumes:
      - ./data:/data
    restart: 'no'

  db:
    image: postgres
    environment:
      POSTGRES_DB: skillora
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - '5435:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user -d skillora']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    ports:
      - '6379:6379'

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - ./data/uploads:/data/uploads
    depends_on:
      fix-perms:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./backend/.env
    ports:
      - '8080:8000'
      - '5678:5678'
    environment:
      - PYTHONPATH=/app
    command: >
      python -m debugpy --listen 0.0.0.0:5678
      -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - ./data/uploads:/data/uploads
    depends_on:
      fix-perms:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./backend/.env
    environment:
      - PYTHONPATH=/app
    command: celery -A app.workers.celery_app.celery worker -l INFO --concurrency=4 --prefetch-multiplier=1

  frontend:
    image: node:20-alpine
    working_dir: /app
    command: sh -lc "npm ci && npm run dev -- --host 0.0.0.0"
    environment:
      VITE_API_URL: http://localhost:8080
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/frontend/node_modules
    ports:
      - '5173:5173'
    depends_on:
      backend:
        condition: service_started
volumes:
  pgdata:
  frontend_node_modules:
